#!/bin/bash
if [[ $EUID -ne 0 ]]; then echo 'This script must be run as root' ; exit 1 ; fi
NO='\033[0;33m' ; OK='\033[0;32m' ; NC='\033[0m'

# Get original user (non-root user)
[ $SUDO_USER ] && CURRENT_USER=$SUDO_USER || CURRENT_USER=`whoami`

YARN_PATH="/home/$CURRENT_USER/.yarn"
GHOST_CLI="$YARN_PATH/bin/ghost"

# TODO validate domain name

# Validate user parameter
#-----------------------------------------------------------------------------------------
if [ -z "$1" ] ; then
    echo -e "\nPlease input the domain name. Example: $(basename "$0") domain.com"
    echo -e "\nUninstall Ghost installation: $(basename "$0") domain.com --uninstall\n"
    exit 1
elif [ ! -z "$2" ] && [ "$2" == "--uninstall" ]; then
    ACTION="uninstall"
else
    ACTION="install"
fi

# Some functions
#-----------------------------------------------------------------------------------------
function CheckGhostCliInstallation() {
    if [ ! -d $YARN_PATH ] || [ ! -f $GHOST_CLI ] ; then
        echo -e "ghost-cli not installed!\n" ; exit
    fi
}

function getFreeTcpPort {
    local ports="${1:-1}" interim="${2:-2099}" spacing=32
    local free_ports=( )
    local taken_ports=( $( netstat -aln | egrep ^tcp | fgrep LISTEN |
                        awk '{print $4}' | egrep -o '[0-9]+$' |
                        sort -n | uniq ) )
    interim=$(( interim + (RANDOM % spacing) ))

    for taken in "${taken_ports[@]}" 65535
    do
        while [[ $interim -lt $taken && ${#free_ports[@]} -lt $ports ]]
        do
        free_ports+=( $interim )
        interim=$(( interim + spacing + (RANDOM % spacing) ))
        done
        interim=$(( interim > taken + spacing
                    ? interim
                    : taken + spacing + (RANDOM % spacing) ))
    done

    [[ ${#free_ports[@]} -ge $ports ]] || return 2

    printf '%d\n' "${free_ports[@]}"
}

# Some parameters
#-----------------------------------------------------------------------------------------
GH_PORT=`getFreeTcpPort`
GH_NAME=$(echo $1 | awk '{ gsub("[.]","-",$1); print $1 }')
DB_NAME=$(echo $GH_NAME | awk '{ gsub("[-]","_",$1); print $1 }')
DB_PASS=$(openssl rand -base64 12 | tr -d "=+/" | cut -c1-25)

# Run Ghost uninstaller
#-----------------------------------------------------------------------------------------
if [ $ACTION == "uninstall" ] ; then

    # Check if installation exists
    if [ ! -d "/srv/$1" ] || [ ! -f "/etc/nginx/vhost.d/$1.conf" ] ; then
        echo -e "\nSite $1 doesn't exists!\n" ; exit
    fi

    # Ready for next process
    echo ; read -p "Press enter to continue or Ctrl + C to cancel ..." ; echo
    CheckGhostCliInstallation

    # Run Ghost uninstaller
    echo -e "\nUninstalling ghost for domain $1"
    sudo rm -f /etc/nginx/vhost.d/$1.conf
    sudo systemctl reload nginx
    $GHOST_CLI uninstall -f --no-prompt --dir /srv/$1

    # Drop database and user
    sudo mysql -e "DROP DATABASE IF EXISTS $DB_NAME"
    sudo mysql -e "DROP USER IF EXISTS '$DB_NAME'@'127.0.0.1'"
    sudo mysql -e "FLUSH PRIVILEGES"

    echo -e "Ghost for $1 has been removed, but we keep old files!\n"
    exit
fi

# Create Nginx virtualhost
#-----------------------------------------------------------------------------------------
if [ -d "/srv/$1" ] || [ -f "/etc/nginx/vhost.d/$1.conf" ] ; then
    echo -e "\nSite $1 already exists!\n" ; exit
fi

echo -e "\nInstalling Ghost for ${NO}${1}${NC}"
echo ; read -p "Press enter to continue or Ctrl + C to cancel ..."
sudo cp /etc/nginx/manifest/vhost-ghost.cnf /etc/nginx/vhost.d/$1.conf
sudo sed -i "s/HOSTNAME/$1/" /etc/nginx/vhost.d/$1.conf
sudo sed -i "s/GH_PORT/$GH_PORT/" /etc/nginx/vhost.d/$1.conf

echo
read -ep "Do you want to use www subdomain?         yes/no : " answer
if [[ "${answer,,}" =~ ^(yes|y)$ ]] ; then
    sudo sed -i "s/# server_name www/server_name www/" /etc/nginx/vhost.d/$1.conf
fi

# Ask to generate LetsEncrypt certificate
read -ep "Do you want to generate SSL certificate?  yes/no : " answer
[[ ! "${answer,,}" =~ ^(yes|y)$ ]] || sudo bash /usr/local/bin/ssl-create $1

# Test nginx configuration then restart
sudo nginx -t 2>/dev/null > /dev/null
if [[ $? == 0 ]]; then
    echo -e "\nReloading Nginx configuration..."
    sudo systemctl reload nginx
else
    echo -e "\nNginx configuration fail, process canceled..."
    sudo rm -f /etc/nginx/vhost.d/$1.conf
    sudo rm -fr "/srv/$1"
    exit
fi

# Execute Ghost installation
#-----------------------------------------------------------------------------------------
echo -e "\nCrafting ghost application...\n"
sudo mkdir -p "/srv/$1" ; sudo chown $CURRENT_USER:www-data $_
sudo mysql -e "CREATE DATABASE IF NOT EXISTS $DB_NAME"
sudo mysql -e "CREATE USER IF NOT EXISTS '$DB_NAME'@'127.0.0.1' IDENTIFIED BY '$DB_PASS'"
sudo mysql -e "GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_NAME'@'127.0.0.1'"
sudo mysql -e "FLUSH PRIVILEGES"

$GHOST_CLI install --no-prompt \
    --url "https://$1"\
    --port "$GH_PORT" \
    --dir "/srv/$1" \
    --pname "$GH_NAME" \
    --db mysql \
    --dbhost 127.0.0.1 \
    --dbuser "$DB_NAME" \
    --dbname "$DB_NAME" \
    --dbpass "$DB_PASS" \
    --no-setup-nginx \
    --no-setup-ssl \
    --process systemd \
    --enable

# Install without running setup
# Read more at: https://docs.ghost.org/api/ghost-cli/
# --no-setup-migrate
# --no-setup

echo -e "\nCongratulation, Ghost has been installed.\n"
echo -e "Database username  : ${NO}${DB_NAME}${NC}"
echo -e "Database password  : ${NO}${DB_PASS}${NC}"
echo -e "Ghost service name : ${NO}${GH_NAME}${NC}"
echo -e "Ghost service port : ${NO}${GH_PORT}${NC}"
echo -e "\nOpen ${OK}https://$1/ghost${NC} and continue installation!\n"
